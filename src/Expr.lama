-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addNamesToState (st, names, vals) {
  foldl(fun(s, [name, v]) {addName(s, name, v)}, st, zip(names, vals))
}


fun addDefs (st, defs) {
  foldl(fun(s, def) {
    case def of 
      Fun(name, arg, body) -> addFunction(s, name, arg, body)
    | Var(names) -> addNames(s, names)
    esac    
    },
    st, defs)
}

fun eval (c@[s, w], expr) {
  case expr of 
    Assn(e1, e2) -> case evalList(c, {e1, e2}) of 
      [c@[s, w], {l, r}] -> case l of 
          ElemRef(lst, id) -> [c, lst[id] := r]
          | _ -> [[s <- [l, r], w], r] 
        esac
      esac
  | Seq(e1, e2) -> case evalList(c, {e1, e2}) of 
      [c, {_, r}] -> [c, r]
      esac
  | Skip -> [c, None]
  -- | Read(x) -> case readWorld(w) of
  --     [rd, w] -> [[s <- [x, rd], w], None]
  --     esac
  -- | Write(e) -> case eval(c, e) of
  --     [c@[s, w], x] -> [[s, writeWorld(x, w)], None]
  --     esac
  | If (cond, e1, e2) -> case eval(c, cond) of 
      [c, cond] -> eval(c, if cond then e1 else e2 fi)
      esac
  | wExpr@While(cond, e) -> case eval(c, cond) of
      [c, 0] -> [c, None]
    | _ -> eval(c, Seq(e, wExpr))
      esac
  | DoWhile(e, cond) -> case eval(c, e) of
      [c, _] -> eval(c, While(cond, e))
      esac
  | Var(x) -> [c, lookup(s, x)]
  | Ref(x) -> [c, x]
  | Const(x) -> [c, x]
  | Binop(x, e1, e2) -> case evalList(c, {e1, e2}) of
      [c, {l, r}] -> [c, evalOp(x, l, r)]
      esac
  | Ignore(e) -> case eval(c, e) of
      [c, _] -> [c, None]
    esac
  | Call(f, arg) -> case evalList(c, arg) of 
      [c@[arg_s, w], x] -> case lookup(arg_s, f) of
        Fun(arg, body) -> case body of 
          External -> case evalBuiltin(f, x, w) of
              [x, w] -> [[s, w], x]
            esac
          | _ -> case addNamesToState(enterFunction(arg_s), arg, x) of
            cur_s -> case eval([cur_s, w], body) of
                [c2@[s2, w2], res] -> [[leaveFunction(arg_s, getGlobal(s2)), w2], res] 
              esac
          esac
        esac
      esac
    esac
  | Scope(defs, body) -> case eval([addDefs(enterScope(s), defs), w], body) of
      [c@[s, w], x] -> [[leaveScope(s), w], x]
    esac
  | String(s) -> [c, s]
  | Array(e) ->  case evalList(c, e) of
      [c, x] -> [c, listArray(x)]
    esac
  | Sexp(s, e) -> case evalList(c, e) of
      [c, x] -> [c, Sexp(s, listArray(x))]
    esac
  | Elem(e1, e2) -> case evalList(c, {e1, e2}) of
      [c, {lst, id}] -> case lst of
          Sexp(_, lst) -> [c, lst[id]]
        | _ -> [c, lst[id]] 
        esac
    esac
  | ElemRef(e1, e2) -> case evalList(c, {e1, e2}) of
      [c, {lst, id}] -> case lst of
          Sexp(_, lst) -> [c, ElemRef(lst, id)]
        | _ -> [c, ElemRef(lst, id)] 
      esac
    esac
  | Set(nm, e) -> case eval(c, e) of
      [c@[s, w], x] -> [[s <- [nm, x], w], Void]
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
