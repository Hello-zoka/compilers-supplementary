-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c, stmt) {
  case c of 
  [st, w] -> case stmt of
      Assn (variable, expr) -> [st <- [variable, evalExpr(st, expr)], w]
    | Seq (stmt1, stmt2) -> eval(eval (c, stmt1), stmt2)
    | Skip -> c 
    | Read (s) -> case w.readWorld of 
      [rd, w2] -> [st <- [s, rd], w2]   
      esac       
    | Write (expr) -> [st, writeWorld (evalExpr (st, expr), w)]
    | If (expr, stmt1, stmt2) -> case evalExpr(st, expr) of
        0 -> eval(c, stmt2)
      | _ -> eval(c, stmt1)
      esac
    | While (expr, stmt1) -> case evalExpr(st, expr) of
        0 -> eval(c, Skip)
      | _ -> eval(c, Seq(stmt1, stmt))
      esac
    | DoWhile (stmt1, expr) -> eval(c, Seq(stmt1, While(expr, stmt1)))
    esac
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
