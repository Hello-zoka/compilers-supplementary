-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of
    {} -> c
    | inst : insns -> 
      case inst of 
        READ -> case (world.readWorld) of
          [rd, w2] ->  eval(env, [rd : stack, state, w2], insns)
        esac
      | WRITE -> case stack of 
          (x : y) -> eval(env, [y, state, writeWorld(x, world)], insns)
        esac
      | BINOP (op) -> case stack of
          (x : (y : z)) -> eval(env, [evalOp(op, y, x) : z, state, world], insns)
        esac
      | LD (x) -> eval(env, [state(x) : stack, state, world], insns)
      | ST (x) -> case stack of
          (y : _) -> eval(env, [stack, state <- [x, y], world], insns)
        esac 
      | CONST (n) -> eval(env, [n : stack, state, world], insns)
      | JMP (l) -> eval(env, c, fromLabel(env, l))
      | LABEL (l) -> eval(env, c, insns)
      | CJMP (c, l) -> case stack of
          (x : y) -> case c of
              "Z" -> eval(env, [y, state, world], if x == 0 then fromLabel(env, l) else insns fi)
            | _ -> eval(env, [y, state, world], if x != 0 then fromLabel(env, l) else insns fi)
          esac
        esac
      | LDA (x) -> eval(env, [x : stack, state, world], insns)
      | DROP -> eval(env, [tl(stack), state, world], insns)
      | STI -> case stack of 
        (x : y : z) -> eval(env, [x : z, state <- [y, x], world], insns)
        esac
      esac 
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (e)      ->
        case env.genLabel of 
          [lab, env] -> 
            case compile(lab, env, e) of
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ WRITE]
            esac
        esac
    | Assn  (x, e)   -> 
        case env.genLabels(2) of 
          [lab1, lab2, env] ->
            case compile(lab1, env, x) of
              [lab1Used, env, left] -> 
                case compile(lab2, env, e) of
                  [lab2Used, env, right] -> [false, env, left <+> label(lab1, lab1Used) <+> right <+> label(lab2, lab2Used) <+ STI]
                esac
            esac
        esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | If (e, s1, s2) -> 
        case env.genLabels(2) of
          [eLab, s2Lab, env] ->
            case compile(eLab, env, e) of
              [eLabUsed, env, eCode] ->
                case compile (lab, env, s1) of
                  [_, env, s1Code] ->
                      case compile (lab, env, s2) of
                        [_, env, s2Code] -> [true, env, eCode <+> label(eLab, eLabUsed) <+ CJMP("Z", s2Lab) <+> s1Code <+ JMP(lab) 
                          <+> label(s2Lab, true) <+> s2Code <+ JMP(lab)]
                      esac
                esac
              esac  
        esac
    | While (e, s) -> 
        case env.genLabels(2) of
          [eLab, start, env] ->
            case compile(eLab, env, e) of
              [eLabUsed, env, eCode] ->
                case compile (start, env, s) of
                  [_, env, sCode] -> [true, env, label(start, true) <+> eCode <+> label(eLab, eLabUsed) <+ CJMP("Z", lab) <+> sCode  
                  <+ JMP(start)]
                esac
            esac
        esac

    | DoWhile (s, e) -> 
        case env.genLabels(2) of
          [eLab, start, env] ->
            case compile(eLab, env, e) of
              [eLabUsed, env, eCode] ->
              case compile (lab, env, s) of
                [labUsed, env, sCode] -> [labUsed, env, label(start, true) <+> sCode <+> eCode <+> label(eLab, eLabUsed) <+ CJMP("NZ", start)]
              esac
            esac
        esac
    | Binop (op, e1, e2) ->
      case env.genLabels(2) of
          [e1Lab, e2Lab, env] ->
            case compile(e1Lab, env, e1) of
              [e1LabUsed, env, e1Code] ->
              case compile (e2Lab, env, e2) of
                [e2LabUsed, env, e2Code] -> [false, env, e1Code <+> label(e1Lab, e1LabUsed) <+> e2Code <+> label(e2Lab, e2LabUsed) <+ BINOP(op)]
              esac
            esac
        esac
    | Ignore (e) -> 
      case env.genLabel of
        [lab, env] ->
          case compile(lab, env, e) of
            [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ DROP]
          esac
      esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
